onboarding_sberchat/
│
├── main.py
│
├── requirements.txt
│
├── config/
│   └── settings.py
│
├── domain/
│   ├── models/
│   │   └── message.py
│   └── services/
│       └── knowledge_search.py    ← вот здесь ваш чистый TF‑IDF модуль
│
├── application/
│   └── handlers/
│       └── message_handler.py
│
├── infrastructure/
│   ├── excel/
│   │   └── excel_repository.py
│   └── sberchat/
│       └── sber_bot.py
│
└── knowledge_base.xlsx


1. config/settings.py
import os

BOT_ENDPOINT = os.getenv("BOT_ENDPOINT", "epbotsandbox.sberchat.sberbank.ru")
BOT_TOKEN    = os.getenv("BOT_TOKEN", "")
BOT_NAME     = os.getenv("BOT_NAME", "rmoconboarding")
ADMIN_IDS    = {int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x}

# Логирование
import logging
logger = logging.getLogger("sber_bot")
logger.setLevel(logging.INFO)
ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"))




2. domain/models/message.py
from dataclasses import dataclass
from datetime import datetime

@dataclass
class FullLogEntry:
    user: str
    text: str
    timestamp: datetime
    source: str



3. domain/services/knowledge_search.py
import pandas as pd
import math
import re
from collections import Counter
from typing import List, Dict, Tuple

class KnowledgeSearch:
    """
    Поиск ответа в базе знаний на основе TF-IDF + косинусного сходства.
    """

    # Стоп‑слова, которые удаляем перед анализом
    STOP_WORDS = {
        "что","где","как","почему","когда","чтобы","это",
        "и","в","на","с","по","за","не","я","ты","он","она","они","мы",
    }

    def __init__(self, excel_path: str, sheet_name=0):
        """
        1) Загружаем Excel: колонки 'Question' и 'Answer'.
        2) Токенизируем и удаляем стоп‑слова.
        3) Считаем TF-IDF матрицу и норму каждого вектора.
        """
        df = pd.read_excel(excel_path, sheet_name=sheet_name)
        if not {"Question","Answer"}.issubset(df.columns):
            raise ValueError("В Excel-файле должны быть колонки 'Question' и 'Answer'")

        # Подготавливаем список пар (токены_вопроса, ответ)
        self.qa: List[Tuple[List[str], str]] = []
        for q, a in zip(df["Question"].astype(str), df["Answer"].astype(str)):
            tokens = self._tokenize(q)
            tokens = [w for w in tokens if w not in self.STOP_WORDS]
            if tokens:
                self.qa.append((tokens, a))

        # Общее число документов
        self.N = len(self.qa)

        # Считаем документные частоты df[w]
        df_counts: Dict[str,int] = {}
        for tokens, _ in self.qa:
            for w in set(tokens):
                df_counts[w] = df_counts.get(w, 0) + 1

        # Вычисляем idf[w] = log((N+1)/(df[w]+1)) + 1
        self.idf: Dict[str,float] = {
            w: math.log((self.N+1)/(df_counts[w]+1)) + 1.0
            for w in df_counts
        }

        # Строим TF-IDF векторы и нормы
        self.doc_tfidf: List[Dict[str,float]] = []
        self.doc_norm:   List[float] = []
        for tokens, _ in self.qa:
            tf = Counter(tokens)
            vec = {w: tf[w] * self.idf[w] for w in tf}
            norm = math.sqrt(sum(v*v for v in vec.values()))
            self.doc_tfidf.append(vec)
            self.doc_norm.append(norm)

    @staticmethod
    def _tokenize(text: str) -> List[str]:
        """
        Приводим к нижнему регистру, оставляем буквы/цифры,
        разделяем по пробелам.
        """
        cleaned = re.sub(r'[^0-9A-Za-zА-Яа-яЁё]+', ' ', text.lower())
        return [tok for tok in cleaned.split() if tok]

    @staticmethod
    def _cosine(v1: Dict[str,float], v2: Dict[str,float], n1: float, n2: float) -> float:
        """
        Косинусное сходство между двумя векторами (словари TF-IDF).
        """
        if n1 == 0 or n2 == 0:
            return 0.0
        dot = sum(v1[k] * v2.get(k,0.0) for k in v1)
        return dot / (n1 * n2)

    def find_best_answer(self, query: str, threshold: float = 0.2) -> str:
        """
        Ищет лучший ответ на query.
        Если max_similarity >= threshold — возвращает ответ,
        иначе — вежливое извинение.
        """
        # Токенизируем и фильтруем
        tokens = self._tokenize(query)
        tokens = [w for w in tokens if w not in self.STOP_WORDS]
        if not tokens:
            return "Извините, я пока не могу ответить на этот вопрос."

        # Строим TF-IDF вектор для запроса
        tfq = Counter(tokens)
        vecq = {w: tfq[w] * self.idf.get(w, math.log((self.N+1)/1)+1.0)
                for w in tfq}
        normq = math.sqrt(sum(v*v for v in vecq.values()))

        # Сравниваем с каждым документом
        best_sim, best_idx = 0.0, -1
        for i, (doc_vec, doc_norm) in enumerate(zip(self.doc_tfidf, self.doc_norm)):
            sim = self._cosine(vecq, doc_vec, normq, doc_norm)
            if sim > best_sim:
                best_sim, best_idx = sim, i

        if best_sim >= threshold:
            return self.qa[best_idx][1]
        return "Извините, я пока не могу ответить на этот вопрос."



4. infrastructure/excel/excel_repository.py
import os
import pandas as pd
from openpyxl import Workbook
from domain.models.message import FullLogEntry
from config.settings import logger

class ExcelRepository:
    def __init__(self):
        self.kb_path      = "knowledge_base.xlsx"
        self.log_path     = "full_chat_log.xlsx"
        self.feedback_path= "feedback_data.xlsx"
        self._init_file(self.log_path,     ["User","Text","Timestamp","Source"])
        self._init_file(self.feedback_path,["Question","Answer","Feedback","Timestamp"])

    def _init_file(self, path, cols):
        if not os.path.exists(path):
            pd.DataFrame(columns=cols).to_excel(path, index=False)
            logger.info(f"Создан файл {path}")

    def append_full_log(self, entry: FullLogEntry):
        df = pd.read_excel(self.log_path)
        df.loc[len(df)] = [entry.user, entry.text, entry.timestamp, entry.source]
        df.to_excel(self.log_path, index=False)

    def append_feedback(self, question, answer, feedback, timestamp):
        df = pd.read_excel(self.feedback_path)
        df.loc[len(df)] = [question, answer, feedback, timestamp]
        df.to_excel(self.feedback_path, index=False)





5. infrastructure/sberchat/sber_bot.py
from dialog_bot_sdk.bot import DialogBot
from config.settings import BOT_ENDPOINT, BOT_TOKEN, logger

class SberBot:
    def __init__(self):
        self.bot = DialogBot.get_secure_bot(BOT_ENDPOINT, BOT_TOKEN)
        self.messaging = self.bot.messaging
        self.updates   = self.bot.updates
        logger.info("SberBot инициализирован")

    def start_polling(self):
        self.updates.on_updates(do_read_message=True, do_register_commands=True)

sber_bot = SberBot()




6. application/handlers/message_handler.py
from dialog_bot_sdk.entities.messaging import MessageHandler, MessageContentType
from dialog_bot_sdk.entities.peers import PeerType
from config.settings import BOT_NAME, ADMIN_IDS
from infrastructure.sberchat.sber_bot import sber_bot
from infrastructure.excel.excel_repository import ExcelRepository
from domain.services.knowledge_search import KnowledgeSearch
from datetime import datetime

# Инициализация репозиториев и поисковика
excel_repo = ExcelRepository()
kb_search  = KnowledgeSearch("knowledge_base.xlsx")

def strip_mention(text: str) -> str:
    return text.lower().replace(f"@{BOT_NAME}".lower(), "").strip()

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

def handle_message(update):
    peer = update.peer
    msg  = update.message
    if msg.text_message is None:
        return

    raw = msg.text_message.text.strip()
    text= strip_mention(raw)

    # В группе — только если есть тег
    if peer.type == PeerType.PEERTYPE_GROUP:
        if BOT_NAME.lower() not in raw.lower():
            return
    else:
        # В личке — только админы
        if not is_admin(update.sender_peer.id):
            return

    # Логируем запрос
    excel_repo.append_full_log(
        FullLogEntry(user=str(update.sender_peer.id), text=text,
                     timestamp=datetime.now(), source="user")
    )

    # Ищем ответ
    answer = kb_search.find_best_answer(text, threshold=0.2)
    # Отправляем
    sber_bot.messaging.send_message(peer, answer)

# Регистрируем
sber_bot.messaging.message_handler([
    MessageHandler(handle_message, MessageContentType.TEXT_MESSAGE)
])





7. main.py
from config.settings import logger
from infrastructure.sberchat.sber_bot import sber_bot
import application.handlers.message_handler  # регистрирует хендлеры

def main():
    logger.info("Запуск...")
    sber_bot.start_polling()

if __name__ == "__main__":
    main()














































import pandas as pd
import math
import re
from collections import Counter
from typing import List, Dict

class KnowledgeBase:
    """
    База вопросов-ответов с поиском по TF-IDF + косинусному сходству.
    """
    # Набор стоп‑слов, которые убираем
    STOP_WORDS = {
        "что","где","как","почему","когда","чтобы","это",
        "и","в","на","с","по","за","не","я","ты","он","она","они","мы",
        # можно расширить под задачи
    }

    def __init__(self, excel_path: str, sheet_name=0):
        """
        1. Считываем Excel: колонки 'Question' и 'Answer'.
        2. Предобрабатываем каждый вопрос: токенизируем, убираем стоп‑слова.
        3. Строим TF-IDF матрицу:
           - idf[w] = log(N / df[w])
           - для каждого документа хранится dict: {w: tfidf(w, doc)}
        """
        df = pd.read_excel(excel_path, sheet_name=sheet_name)
        if not {"Question","Answer"}.issubset(df.columns):
            raise ValueError("В Excel должны быть столбцы 'Question' и 'Answer'")

        # Читаем пары
        self.qa = []
        for q, a in zip(df['Question'].astype(str), df['Answer'].astype(str)):
            q_clean = q.strip()
            if not q_clean:
                continue
            tokens = self._tokenize(q_clean)
            tokens = [t for t in tokens if t not in self.STOP_WORDS]
            if not tokens:
                continue
            self.qa.append((tokens, a))

        # Всего документов
        self.N = len(self.qa)

        # Считаем документные частоты df[w]
        df_counts: Dict[str, int] = {}
        for tokens, _ in self.qa:
            unique = set(tokens)
            for w in unique:
                df_counts[w] = df_counts.get(w, 0) + 1

        # Считаем idf
        self.idf: Dict[str, float] = {}
        for w, dfw in df_counts.items():
            # Добавляем +1 в знаменателе для сглаживания
            self.idf[w] = math.log((self.N + 1) / (dfw + 1)) + 1.0

        # Строим TF-IDF векторы и их нормы
        self.doc_tfidf: List[Dict[str, float]] = []
        self.doc_norm: List[float] = []
        for tokens, _ in self.qa:
            tf = Counter(tokens)
            # строим tf-idf: tfidf = tf[w] * idf[w]
            vec = {w: tf[w] * self.idf[w] for w in tf}
            norm = math.sqrt(sum(v * v for v in vec.values()))
            self.doc_tfidf.append(vec)
            self.doc_norm.append(norm)

    @staticmethod
    def _tokenize(text: str) -> List[str]:
        """
        Убираем все, кроме букв и цифр, приводим к нижнему регистру,
        разбиваем по пробелам.
        """
        text = re.sub(r'[^0-9A-Za-zА-Яа-яЁё]+', ' ', text.lower())
        return [tok for tok in text.split() if tok]

    @staticmethod
    def _cosine(vec1: Dict[str, float], vec2: Dict[str, float],
                norm1: float, norm2: float) -> float:
        """
        Косинусное сходство: dot(vec1, vec2) / (norm1 * norm2)
        Если один из векторов нулевой, возвращает 0.0
        """
        if norm1 == 0 or norm2 == 0:
            return 0.0
        # пересечение ключей
        dot = sum(vec1[k] * vec2.get(k, 0.0) for k in vec1)
        return dot / (norm1 * norm2)

    def find_best_answer(self, query: str, threshold: float = 0.2) -> str:
        """
        Ищем лучший ответ на query:
        1. Токенизируем и фильтруем query.
        2. Строим tf-idf вектор для query (используем idf из корпуса).
        3. Считаем косинусное сходство с каждым документом.
        4. Если max(sim) >= threshold, возвращаем связанный answer,
           иначе — отказ.
        """
        # Предобработка запроса
        tokens = self._tokenize(query)
        tokens = [t for t in tokens if t not in self.STOP_WORDS]
        if not tokens:
            return "Извините, я пока не могу ответить на этот вопрос."

        # tf для запроса
        tfq = Counter(tokens)
        # строим вектор query
        vecq = {w: tfq[w] * self.idf.get(w, math.log((self.N+1)/1)+1.0)
                for w in tfq}
        normq = math.sqrt(sum(v * v for v in vecq.values()))

        # Проверяем каждое doc
        best_idx, best_sim = -1, 0.0
        for i, (doc_vec, doc_norm) in enumerate(zip(self.doc_tfidf, self.doc_norm)):
            sim = self._cosine(vecq, doc_vec, normq, doc_norm)
            if sim > best_sim:
                best_sim = sim
                best_idx = i

        # Если достаточно похожи — возвращаем ответ
        if best_sim >= threshold and best_idx >= 0:
            return self.qa[best_idx][1]

        return "Извините, я пока не могу ответить на этот вопрос."


# -------------
# Пример
# -------------
if __name__ == "__main__":
    kb = KnowledgeBase("knowledge_base.xlsx")
    print("База загружена. Введите вопрос:")
    while True:
        q = input("> ").strip()
        if not q:
            break
        print("Бот:", kb.find_best_answer(q, threshold=0.2))









# handlers/admin_commands.py

from dialog_bot_sdk.entities.messaging import CommandHandler
from dialog_bot_sdk.entities.peers     import PeerType
from config.config                    import ADMIN_IDS
from infrastructure.sber_sdk           import sber_bot
from infrastructure.excel_repository   import ExcelRepository

# Предполагаем, что excel_repo создан (например, в main и передан сюда)
excel_repo = ExcelRepository("knowledge_base.xlsx", "bot_logs.xlsx")

def is_admin(message):
    """Проверяет, что sender_peer.id есть в списке админов."""
    return message.sender_peer.id in ADMIN_IDS

# --- Команда 1: добавление новой пары Вопрос;Ответ ---
def add_qa_handler(update):
    # update: UpdateMessage
    peer   = update.peer
    sender = update.sender_peer

    if not is_admin(update):
        return sber_bot.messaging.send_message(peer, "❌ Только админы могут управлять базой знаний.")

    # ожидаем текст вида: "Вопрос?;Ответ!"
    payload = update.message.text_message.text
    try:
        # убираем команду "/add_qa " в начале
        _, body = payload.split(" ", 1)
        question, answer = [p.strip() for p in body.split(";", 1)]
    except ValueError:
        return sber_bot.messaging.send_message(
            peer, "❗ Формат: /add_qa Вопрос?; Ответ!"
        )

    # Добавляем в Excel (реализуйте этот метод в ExcelRepository)
    excel_repo.add_qa(question, answer)
    sber_bot.messaging.send_message(peer, f"✅ Добавлено: «{question}» → «{answer}».")


# --- Команда 2: удаление пары по вопросу ---
def delete_qa_handler(update):
    peer   = update.peer
    sender = update.sender_peer

    if not is_admin(update):
        return sber_bot.messaging.send_message(peer, "❌ Только админы могут управлять базой знаний.")

    # ожидаем текст вида: "/del_qa Вопрос?"
    parts = update.message.text_message.text.split(" ", 1)
    if len(parts) < 2 or not parts[1].strip():
        return sber_bot.messaging.send_message(peer, "❗ Формат: /del_qa Вопрос?")
    question = parts[1].strip()

    # Удаляем в Excel (реализуйте этот метод)
    deleted = excel_repo.delete_qa(question)
    if deleted:
        sber_bot.messaging.send_message(peer, f"🗑 Пара с вопросом «{question}» удалена.")
    else:
        sber_bot.messaging.send_message(peer, f"❌ Не нашёл вопрос «{question}» в базе.")


# --- Команда 3: отправка Excel-файла базы знаний ---
def export_kb_handler(update):
    peer   = update.peer
    sender = update.sender_peer

    if not is_admin(update):
        return sber_bot.messaging.send_message(peer, "❌ Только админы могут выгружать базу знаний.")

    path = excel_repo.kb_path  # путь к файлу knowledge_base.xlsx
    # Отправляем файл в чат
    sber_bot.messaging.send_file(peer, path, text="📦 Вот актуальная база знаний:")





from dialog_bot_sdk.entities.messaging import CommandHandler
from dialog_bot_sdk.entities.peers     import PeerType
from infrastructure.sber_sdk           import sber_bot
from handlers.admin_commands           import (
    add_qa_handler,
    delete_qa_handler,
    export_kb_handler,
)

# Регистрируем команды (только админам, но PeerType.PEERTYPE_PRIVATE удобнее)
sber_bot.messaging.command_handler([
    CommandHandler(add_qa_handler,    "add_qa",  PeerType.PEERTYPE_PRIVATE, description="Добавить вопрос;ответ"),
    CommandHandler(delete_qa_handler, "del_qa",  PeerType.PEERTYPE_PRIVATE, description="Удалить по вопросу"),
    CommandHandler(export_kb_handler, "export_kb", PeerType.PEERTYPE_PRIVATE, description="Выгрузить Excel базы знаний"),
])




from openpyxl import load_workbook

class ExcelRepository:
    def __init__(self, kb_path: str, log_path: str):
        self.kb_path  = kb_path
        # … остальной конструктор

    def add_qa(self, question: str, answer: str):
        """Добавляет новую строку в начало/конец листа базы знаний."""
        wb = load_workbook(self.kb_path)
        ws = wb.active
        ws.append([question, answer])
        wb.save(self.kb_path)

    def delete_qa(self, question: str) -> bool:
        """
        Удаляет первую найденную строку, где колонка 'Question' == question.
        Возвращает True, если удалили, иначе False.
        """
        wb = load_workbook(self.kb_path)
        ws = wb.active
        found = False
        # Ищем во всех строках, начиная с 2‑й (пропускаем заголовок)
        for row in list(ws.iter_rows(min_row=2)):
            cell = row[0]  # первый столбец — вопрос
            if str(cell.value).strip() == question:
                ws.delete_rows(cell.row, 1)
                found = True
                break
        if found:
            wb.save(self.kb_path)
        return found




























from dialog_bot_sdk.entities.messaging import CommandHandler, MessageHandler, MessageContentType
from dialog_bot_sdk.entities.peers     import PeerType
from infrastructure.sberchat.sber_bot   import sber_bot

# … ваши существующие импорты и хендлеры …

def get_peer(update):
    """
    Команда /get_peer — бот шлёт обратно peer.id и peer.type
    Работает и в ЛС, и в группе.
    """
    peer = update.peer
    # отправляем простое текстовое сообщение
    text = f"Peer ID: {peer.id}\nPeer Type: {peer.type.name}"
    sber_bot.messaging.send_message(peer, text)

# Регистрируем команду
sber_bot.messaging.command_handler([
    # ваша уже существующая регистрация MessageHandler
    MessageHandler(handle_message, MessageContentType.TEXT_MESSAGE),
    # регистрируем /get_peer для ЛС и для Группы
    CommandHandler(get_peer, "get_peer", PeerType.PEERTYPE_PRIVATE,
                   description="Вывести peer.id и peer.type"),
    CommandHandler(get_peer, "get_peer", PeerType.PEERTYPE_GROUP,
                   description="Вывести peer.id и peer.type"),
])
